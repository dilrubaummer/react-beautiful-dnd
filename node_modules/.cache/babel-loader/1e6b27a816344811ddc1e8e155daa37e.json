{"ast":null,"code":"var _jsxFileName = \"/Applications/React-Project/react-dnd/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'reset-css';\nimport initialData from './initial-data';\nimport Column from './column';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n\tdisplay:flex;\n`;\n_c = Container;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nclass InnerList extends React.PureComponent {\n  // shouldComponentUpdate(nextProps){\n  // \tif(nextProps.column === this.props.Column &&\n  // \t\tnextProps.taskMap === this.props.taskMap &&\n  // \t\tnextProps.index === this.props.index\n  // \t) {\n  // \t\treturn false\n  // \t}\n  // \treturn true;\n  // }\n  render() {\n    const {\n      column,\n      taskMap,\n      index\n    } = this.props;\n    const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n    const isDropDisabled = index < this.props.homeIndex;\n    return /*#__PURE__*/_jsxDEV(Column, {\n      column: column,\n      tasks: tasks,\n      isDropDisabled: isDropDisabled,\n      index: index\n    }, column.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this);\n  }\n}\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = initialData;\n    this.onDragStart = start => {\n      const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n      this.setState({\n        homeIndex\n      });\n    };\n    this.onDragEnd = result => {\n      //ToDo reorder Column\n      this.setState({\n        homeIndex: null\n      });\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      const {\n        destination,\n        source,\n        draggableId,\n        type\n      } = result;\n      if (!destination) {\n        return;\n      }\n      if (destination.droppableId === source.droppableId && source.index === destination.index) {\n        return;\n      }\n      if (type === 'column') {\n        const newColumnOrder = Array.from(this.state.columnOrder);\n        newColumnOrder.splice(source.index, 1);\n        newColumnOrder.splice(destination.index, 0, draggableId);\n        const newState = {\n          ...this.state,\n          columnOrder: newColumnOrder\n        };\n        this.setState(newState);\n        return;\n      }\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = {\n          ...start,\n          taskIds: newTaskIds\n        };\n        const newState = {\n          ...this.state,\n          columns: {\n            ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      }\n\n      //Moving one list to another\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = {\n        ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n      const newFinish = {\n        ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragStart: this.onDragStart\n      //onDragUpdate = {this.onDragUpdate}\n      ,\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        children: provided => /*#__PURE__*/_jsxDEV(Container, {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [this.state.columnOrder.map((columnId, index) => {\n            const column = this.state.columns[columnId];\n            return /*#__PURE__*/_jsxDEV(InnerList, {\n              column: column,\n              taskMap: this.state.tasks,\n              index: index,\n              homeIndex: this.state.homeIndex\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 8\n            }, this);\n          }), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this);\n  }\n}\nroot.render(\n/*#__PURE__*/\n//<React.StrictMode>\n_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 177,\n  columnNumber: 5\n}, this)\n//</React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","ReactDOM","initialData","Column","styled","DragDropContext","Droppable","Container","div","root","createRoot","document","getElementById","InnerList","PureComponent","render","column","taskMap","index","props","tasks","taskIds","map","taskId","isDropDisabled","homeIndex","id","App","Component","state","onDragStart","start","columnOrder","indexOf","source","droppableId","setState","onDragEnd","result","body","style","color","backgroundColor","destination","draggableId","type","newColumnOrder","Array","from","splice","newState","columns","finish","newTaskIds","newColumn","startTaskIds","newStart","finishTaskIds","newFinish","provided","droppableProps","innerRef","columnId","placeholder"],"sources":["/Applications/React-Project/react-dnd/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'reset-css';\nimport initialData from './initial-data';\nimport Column from './column'; \nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n\tdisplay:flex;\n`;\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nclass InnerList extends React.PureComponent{\n\t// shouldComponentUpdate(nextProps){\n\t// \tif(nextProps.column === this.props.Column &&\n\t// \t\tnextProps.taskMap === this.props.taskMap &&\n\t// \t\tnextProps.index === this.props.index\n\t// \t) {\n\t// \t\treturn false\n\t// \t}\n\t// \treturn true;\n\t// }\n\trender(){\n\t\tconst { column, taskMap, index} = this.props;\n\t\tconst tasks  = column.taskIds.map(taskId => taskMap[taskId]); \n\t\tconst isDropDisabled = index < this.props.homeIndex; \n\t\treturn <Column \n\t\t\tkey={column.id} \n\t\t\tcolumn={column} \n\t\t\ttasks={tasks} \n\t\t\tisDropDisabled={isDropDisabled } \n\t\t\tindex={index}/>;\n\t}\n}\nclass App extends React.Component{\n\tstate = initialData;\n\t// onDragStart = () => {\n\t// \tdocument.body.style.color ='orange';\n\t// \tdocument.body.style.transition = 'background-color 0.2s ease';\n\t// };\n\n\t// onDragUpdate = update => {\n\t// \tconst {destination} = update;\n\t// \tconst opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n\t// \tdocument.body.style.backgroundColor  = `rgba(153, 141, 217, ${opacity})`;\n\t// };\n\n\tonDragStart = (start) =>{\n\t\tconst homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\t\tthis.setState({\n\t\t\thomeIndex,\n\t\t});\n\t}\n\n\tonDragEnd = result => {\n\t\t//ToDo reorder Column\n\t\tthis.setState({\n\t\t\thomeIndex:null,\n\t\t});\n \n\t\tdocument.body.style.color ='inherit';\n\t\tdocument.body.style.backgroundColor = 'inherit';\n\t\tconst {destination, source, draggableId, type} =result;\n\n\t\tif(!destination){\n\t\t\treturn;\n\t\t}\n\n\t\tif(destination.droppableId === source.droppableId && source.index === destination.index){\n\t\t\treturn;\n\t\t}\n\n\t\tif(type === 'column'){\n\t\t\tconst newColumnOrder = Array.from(this.state.columnOrder);\n\t\t\tnewColumnOrder.splice(source.index,1);\n\t\t\tnewColumnOrder.splice(destination.index, 0,draggableId);\n\n\t\t\tconst newState = {\n\t\t\t\t...this.state,\n\t\t\t\tcolumnOrder : newColumnOrder\n\t\t\t};\n\t\t\tthis.setState(newState);\n\t\t\treturn; \n\t\t}\n\n\t\tconst start  = this.state.columns[source.droppableId];\n\t\tconst finish = this.state.columns[destination.droppableId];\n\n\t\tif( start === finish){\n\n\t\t\tconst newTaskIds = Array.from(start.taskIds); \n\t\t\tnewTaskIds.splice(source.index,1);\n\t\t\tnewTaskIds.splice(destination.index, 0, draggableId);\n\n\t\t\tconst newColumn = {\n\t\t\t\t...start,\n\t\t\t\ttaskIds:newTaskIds\n\t\t\t};\n\t\t\tconst newState = {\n\t\t\t\t...this.state,\n\t\t\t\tcolumns:{\n\t\t\t\t\t...this.state.columns,\n\t\t\t\t\t[newColumn.id]:newColumn,\n\t\t\t\t},\n\t\t\t};\n\t\t\tthis.setState(newState);\n\t\t\treturn;\n\t\t}\n\n\t\t//Moving one list to another\n\t\tconst startTaskIds = Array.from(start.taskIds);  \n\t\tstartTaskIds.splice(source.index, 1);\n\t\tconst newStart = {\n\t\t\t...start,\n\t\t\ttaskIds:startTaskIds,\n\t\t};\n\n\t\tconst finishTaskIds = Array.from(finish.taskIds); \n\t\tfinishTaskIds.splice(destination.index, 0, draggableId);\n\t\tconst newFinish = {\n\t\t\t...finish,\n\t\t\ttaskIds:finishTaskIds,\n\t\t};\n\n\t\tconst newState = {\n\t\t\t...this.state,\n\t\t\tcolumns:{\n\t\t\t\t...this.state.columns,\n\t\t\t\t[newStart.id]: newStart,\n\t\t\t\t[newFinish.id]: newFinish,\n\t\t\t},\n\t\t};\n\t\tthis.setState(newState)\n\t\n\t};\n\n\trender(){\n\t\treturn (\n\t\t\t\n\t\t\t<DragDropContext \n\t\t\t\tonDragStart = {this.onDragStart}\n\t\t\t\t//onDragUpdate = {this.onDragUpdate}\n\t\t\t\tonDragEnd = {this.onDragEnd}\n\t\t\t>\n\t\t\t\t<Droppable droppableId='all-columns' direction='horizontal' type=\"column\"> \n\t\t\t\t{(provided) => (\n\t\t\t\t\t<Container\n\t\t\t\t\t\t{...provided.droppableProps}\n\t\t\t\t\t\tref = {provided.innerRef}\n\t\t\t\t\t>\n\t\t\t\t\t{\tthis.state.columnOrder.map( (columnId, index) => {\n\t\t\t\t\t\tconst column = this.state.columns[columnId];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<InnerList \n\t\t\t\t\t\t\t\tkey    = {column.id}\n\t\t\t\t\t\t\t\tcolumn = {column}\n\t\t\t\t\t\t\t\ttaskMap  = {this.state.tasks}\n\t\t\t\t\t\t\t\tindex  = {index}\n\t\t\t\t\t\t\t\thomeIndex = {this.state.homeIndex}\n\t\t\t\t\t\t\t/> \n\t\t\t\t\t\t);\n\t\t\t\t\t\t  \n\t\t\t\t\t})}\n\t\t\t\t\t{provided.placeholder}\t\n\t\t\t\t\t</Container>\t\n\t\t\t\t)}</Droppable>\n\t\t\t</DragDropContext>\n\t\t\t\n\t\t\n\t\t);\n\t} \n}\n\nroot.render(\n  //<React.StrictMode>\n    <App />\n  //</React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}